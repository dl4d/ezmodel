1. Flow From Directory for data augmentation training
1bis. Flow from directory for everything -> virtual ezset (ezset, virtual=True):
      In this case, we use flow from directory when training
2. test image on the fly
3. demo script for imagenet prediction (or anything using a pretrained eznetwork)
4. SMOTING binary classes for imbalance: need an smote_oversampling() function into ezset
5. Add example dataset like MNIST, Bacteria, Methylom, Blob, Skin
6. Implementation of YOLO like architecture
7. Implementation of basic autoencoder (AE)
8. Implementation of convolutional autoencoder (CAE)
9. Implementation of variational autoencoder (VA)
10. Extraction and visualization of network layer weight for convolutional neural networks
11. Function to show segmentation prediction mask on original images (either lasso or color superimposed)
12. DONE
13. Replace 0/1/2 .. into the confusion matrix in case we have a synset into the ezset
14. ezblocks : Code blocks again using __call__ to be able to build a network from ezblock using functionnal way as Keras do
15. ----> A changer par la version keras (2.2.4) ResNet50 => revoir le code car changement de version de keras
16. Check overwriting variable into JupyterNotebook -> should conflict transformers ....
17. Manage Tensorflow Graph Session (check pw2_cnn.ipynb on Colab to get the piece of code to clear keras session)
18. Make ezutils.keep without synsets

19. NASnetlarge, NASNetMobile, DenseNet121,DenseNet169, DenseNet201, Resnet, ResnetV2, ResNext to include into:
    - eznetwork for empty
    - ezblocks for pretrained
    - ezset for preprocessing inputs

URGENT
1. ezmodel.PR() taking into account multiclass like ezmodel.ROC()
2. confusion matrix from sklearn:
    cm_plot_labels = ['no_tumor_tissue', 'has_tumor_tissue']
    plot_confusion_matrix(cm, cm_plot_labels, title='Confusion Matrix')
3. sklearn classification report to add somewher into ezmodel, something like ezmodel.classification_report() should work
